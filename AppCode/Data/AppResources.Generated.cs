// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "AppResources.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class AppResources
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator
// App/Edition: CDN / CloudFlare/
// User:        2sic Web-Developer
namespace AppCode.Data
{
  // This is a generated class for AppResources (scope: System.App)
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AppResources data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.FlushAll`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  /// <remarks>
  /// This Content-Type is NOT in the default scope, so you may not see it in the Admin UI. It's in the scope System.App.
  /// </remarks>
  public partial class AppResources: AutoGenerated.ZAutoGenAppResources
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for System.App.AppResources in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenAppResources: Custom.Data.CustomItem
  {
    /// <summary>
    /// FlushAll as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FlushAll", scrubHtml: true) etc.
    /// </summary>
    public string FlushAll => _item.String("FlushAll", fallback: "");

    /// <summary>
    /// FlushTags as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FlushTags", scrubHtml: true) etc.
    /// </summary>
    public string FlushTags => _item.String("FlushTags", fallback: "");

    /// <summary>
    /// FlushTitle as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FlushTitle", scrubHtml: true) etc.
    /// </summary>
    public string FlushTitle => _item.String("FlushTitle", fallback: "");

    /// <summary>
    /// FlushUrl as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("FlushUrl", scrubHtml: true) etc.
    /// </summary>
    public string FlushUrl => _item.String("FlushUrl", fallback: "");

    /// <summary>
    /// LabelCurrentTabId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelCurrentTabId", scrubHtml: true) etc.
    /// </summary>
    public string LabelCurrentTabId => _item.String("LabelCurrentTabId", fallback: "");

    /// <summary>
    /// LabelDisabled as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelDisabled", scrubHtml: true) etc.
    /// </summary>
    public string LabelDisabled => _item.String("LabelDisabled", fallback: "");

    /// <summary>
    /// LabelEnabled as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelEnabled", scrubHtml: true) etc.
    /// </summary>
    public string LabelEnabled => _item.String("LabelEnabled", fallback: "");

    /// <summary>
    /// LabelSettings as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelSettings", scrubHtml: true) etc.
    /// </summary>
    public string LabelSettings => _item.String("LabelSettings", fallback: "");

    /// <summary>
    /// LabelTitle as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LabelTitle", scrubHtml: true) etc.
    /// </summary>
    public string LabelTitle => _item.String("LabelTitle", fallback: "");

    /// <summary>
    /// MsgAppliedFromParent as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MsgAppliedFromParent", scrubHtml: true) etc.
    /// </summary>
    public string MsgAppliedFromParent => _item.String("MsgAppliedFromParent", fallback: "");

    /// <summary>
    /// MsgAppliedToPage as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MsgAppliedToPage", scrubHtml: true) etc.
    /// </summary>
    public string MsgAppliedToPage => _item.String("MsgAppliedToPage", fallback: "");

    /// <summary>
    /// MsgNoSettings as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MsgNoSettings", scrubHtml: true) etc.
    /// </summary>
    public string MsgNoSettings => _item.String("MsgNoSettings", fallback: "");

    /// <summary>
    /// MsgNotAppliedSettings as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MsgNotAppliedSettings", scrubHtml: true) etc.
    /// </summary>
    public string MsgNotAppliedSettings => _item.String("MsgNotAppliedSettings", fallback: "");

    /// <summary>
    /// MsgOpenInAnonymous as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("MsgOpenInAnonymous", scrubHtml: true) etc.
    /// </summary>
    public string MsgOpenInAnonymous => _item.String("MsgOpenInAnonymous", fallback: "");

    /// <summary>
    /// StatisticsIntro as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("StatisticsIntro", scrubHtml: true) etc.
    /// </summary>
    public string StatisticsIntro => _item.String("StatisticsIntro", fallback: "");

    /// <summary>
    /// StatisticsTitle as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("StatisticsTitle", scrubHtml: true) etc.
    /// </summary>
    public string StatisticsTitle => _item.String("StatisticsTitle", fallback: "");
  }
}