// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "AppSettings.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class AppSettings
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator
// App/Edition: CDN / CloudFlare/
// User:        2sic Web-Developer
namespace AppCode.Data
{
  // This is a generated class for AppSettings (scope: System.App)
  // To extend/modify it, see instructions above.

  /// <summary>
  /// AppSettings data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.ApiToken`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  /// <remarks>
  /// This Content-Type is NOT in the default scope, so you may not see it in the Admin UI. It's in the scope System.App.
  /// </remarks>
  public partial class AppSettings: AutoGenerated.ZAutoGenAppSettings
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for System.App.AppSettings in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenAppSettings: Custom.Data.CustomItem
  {
    /// <summary>
    /// ApiToken as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ApiToken", scrubHtml: true) etc.
    /// </summary>
    public string ApiToken => _item.String("ApiToken", fallback: "");

    /// <summary>
    /// CacheTag as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("CacheTag", scrubHtml: true) etc.
    /// </summary>
    public string CacheTag => _item.String("CacheTag", fallback: "");

    /// <summary>
    /// IsEnabled as bool. <br/>
    /// To get nullable use .Get("IsEnabled") as bool?;
    /// </summary>
    public bool IsEnabled => _item.Bool("IsEnabled");

    /// <summary>
    /// MaxAge as int. <br/>
    /// To get other types use methods such as .Decimal("MaxAge")
    /// </summary>
    public int MaxAge => _item.Int("MaxAge");

    /// <summary>
    /// OpenSettings as bool. <br/>
    /// To get nullable use .Get("OpenSettings") as bool?;
    /// </summary>
    public bool OpenSettings => _item.Bool("OpenSettings");

    /// <summary>
    /// SMaxAge as int. <br/>
    /// To get other types use methods such as .Decimal("SMaxAge")
    /// </summary>
    public int SMaxAge => _item.Int("SMaxAge");

    /// <summary>
    /// ZoneId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ZoneId", scrubHtml: true) etc.
    /// </summary>
    public string ZoneId => _item.String("ZoneId", fallback: "");
  }
}