// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "CacheSettings.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class CacheSettings
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator
// App/Edition: CDN / CloudFlare/
// User:        2sic Web-Developer
namespace AppCode.Data
{
  // This is a generated class for CacheSettings 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// CacheSettings data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.ApplyToChildren`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class CacheSettings: AutoGenerated.ZAutoGenCacheSettings
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.CacheSettings in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenCacheSettings: Custom.Data.CustomItem
  {
    /// <summary>
    /// ApplyToChildren as bool. <br/>
    /// To get nullable use .Get("ApplyToChildren") as bool?;
    /// </summary>
    public bool ApplyToChildren => _item.Bool("ApplyToChildren");

    /// <summary>
    /// ApplyToPage as bool. <br/>
    /// To get nullable use .Get("ApplyToPage") as bool?;
    /// </summary>
    public bool ApplyToPage => _item.Bool("ApplyToPage");

    /// <summary>
    /// CacheTag as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("CacheTag", scrubHtml: true) etc.
    /// </summary>
    public string CacheTag => _item.String("CacheTag", fallback: "");

    /// <summary>
    /// IsEnabled as bool. <br/>
    /// To get nullable use .Get("IsEnabled") as bool?;
    /// </summary>
    public bool IsEnabled => _item.Bool("IsEnabled");

    /// <summary>
    /// MaxAge as int. <br/>
    /// To get other types use methods such as .Decimal("MaxAge")
    /// </summary>
    public int MaxAge => _item.Int("MaxAge");

    /// <summary>
    /// PageId as int. <br/>
    /// To get other types use methods such as .Decimal("PageId")
    /// </summary>
    public int PageId => _item.Int("PageId");

    /// <summary>
    /// SMaxAge as int. <br/>
    /// To get other types use methods such as .Decimal("SMaxAge")
    /// </summary>
    public int SMaxAge => _item.Int("SMaxAge");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}