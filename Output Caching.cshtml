@inherits AppCode.Razor.AppRazor
@using AppCode.Data
@using AppCode.Helpers

@using ToSic.Razor.Blade
@using System.Web
@using System
@using DotNetNuke.Entities.Portals
@using DotNetNuke.Entities.Tabs

@{
  var currentTabId = MyPage.Id;
  var allCacheSettings = App.Data.GetAll<CacheSettings>();

  // Find relevant cache setting (for page or parent)
  var status = FindRelevantCacheSetting(currentTabId, allCacheSettings);

  // Extract values with fallback to App.Settings
  var isEnabled = GetSettingValue(status, "IsEnabled", App.Settings.IsEnabled);
  var cacheMaxAge = GetSettingValue(status, "MaxAge", App.Settings.MaxAge);
  var cacheSMaxAge = GetSettingValue(status, "SMaxAge", App.Settings.SMaxAge);
  var cacheTag = status.Found && Text.Has(status.Settings.CacheTag)
    ? status.Settings.CacheTag
    : App.Settings.CacheTag;

  var timeStamp = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss");

  var header = "";
  if (isEnabled)
  {
    SetPublicCacheHeaders(Response, (int)cacheMaxAge, (int)cacheSMaxAge, cacheTag);
    header = $"public, max-age={cacheMaxAge}, s-maxage={cacheSMaxAge}";
  }

  var data = new {
    domId = MyContext.Module.Id,
    isEnabled = isEnabled.ToString().ToLower(),
    header = header,
    cacheTag = cacheTag,
    serverTime = timeStamp
  };
}

@* Add a hidden timestamp to better debug any issues *@
<!-- Server Timestamp: @timeStamp -->

@* Add scripts etc. to optionally show caching information in anonymous mode, if the correct link is used *@
<script src="@App.Folder.Url/dist/index.js"></script>
@Kit.Page.TurnOn("window.appCdn.initCacheStatus()", data: data)

@* Show Admin Area to Editors *@
@if (MyUser.IsContentAdmin)
{
  var toolbar = GetToolbar(status, currentTabId);

  @* Accordion with everything *@
  <div class="accordion" id="app-cdn">
    <div class="accordion-item">
      
      @* Accordion Header with status information *@
      <h2 class="accordion-header">
        <button class="accordion-button @(App.Settings.OpenSettings ? "" : "collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#app-cache-settings">
          Output Caching @(isEnabled ? App.Resources.LabelEnabled + " ✔️" : App.Resources.LabelDisabled + " ❌")
        </button>
      </h2>
      
      @* Accordion Body with settings and stats; should be collapsed in production (see App setting for that) *@
      <div id="app-cache-settings" class="accordion-collapse collapse @(App.Settings.OpenSettings ? "show" : "")" data-bs-parent="#app-cdn">
        <div class="accordion-body">
          @* Green box showing which settings are being used *@
          <div class="alert alert-success" @toolbar>
            @RenderSettingsInfo(status, currentTabId)
          
            <div>
              @App.Resources.LabelSettings
              <strong>MaxAge:</strong> <code>@cacheMaxAge</code>;
              <strong>SMaxAge:</strong> <code>@cacheSMaxAge</code>;
              <strong>Cache-Tag:</strong> <code>@Text.First(cacheTag, "-")</code>
            </div>
          
            @* Info to see the final stats in anonymous mode is for everybody *@
            <div class="text-danger">@Html.Raw(App.Resources.MsgOpenInAnonymous)</div>
          </div>

          <h3>@App.Resources.FlushTitle</h3>
          <div class="input-group mb-3">
            <button class="btn btn-primary" type="button" id="custom-purge">@App.Resources.FlushUrl</button>
            <input type="text" class="form-control" placeholder="Enter url which should be purged" value="@Link.To()" id="custom-purge-url">
          </div>

          <div class="input-group mb-3">
            <button class="btn btn-outline-primary" type="button" id="tag-purge">@App.Resources.FlushTags</button>
            <input type="text" class="form-control" value="" id="tag-purge-url">
          </div>

          <div class="input-group mb-3">
            <button class="btn btn-outline-primary" type="button" id="full-purge">@App.Resources.FlushAll</button>
          </div>

          @* Only show statistics to super users, and others would be confused *@
          @if (PortalSettings.Current.UserInfo.IsSuperUser)
          {
            <h3>@App.Resources.StatisticsTitle</h3>
            @Html.Raw(App.Resources.StatisticsIntro)
            <textarea class="form-control" id="app-stats" rows="8" readonly></textarea>
          }
        </div>
      </div>
    </div>
  </div>
}

<style>
  .alert-success .text-danger p {
    margin-bottom: 0;
  }
</style>

@functions {
  // Helper: Set HTTP Cache Headers
  public void SetPublicCacheHeaders(HttpResponseBase Response, int browserCacheSeconds, int cloudflareCacheSeconds, string cacheTags = "")
  {
    Response.Cache.SetCacheability(HttpCacheability.Public);
    var ttlBrowser = TimeSpan.FromSeconds(browserCacheSeconds);
    var ttlCloudflare = TimeSpan.FromSeconds(cloudflareCacheSeconds);
    Response.Cache.SetMaxAge(ttlBrowser);
    Response.Cache.SetProxyMaxAge(ttlCloudflare);

    if (!string.IsNullOrEmpty(cacheTags))
      Response.Headers.Add("Cache-Tag", cacheTags);
  }

  // Helper: Find relevant cache setting for current or parent page
  private SettingsBundle FindRelevantCacheSetting(int currentTabId, IEnumerable<dynamic> allSettings)
  {
    var status = new SettingsBundle {
      ForPageId = currentTabId,
      OfPageId = currentTabId,
      Settings = allSettings?.FirstOrDefault(c => c.PageId == currentTabId),
      IgnoredPageSettings = null,
      TriedParents = false
    };

    if (status.Settings == null || status.Settings.ApplyToPage == false)
      status = FindParentCacheSetting(status, allSettings);

    return status;
  }

  private SettingsBundle FindParentCacheSetting(SettingsBundle original, IEnumerable<dynamic> allSettings)
  {
    var portalId = PortalSettings.Current.PortalId;
    var parentTab = PortalSettings.Current.ActiveTab;
    while (parentTab != null)
    {
      // Check if we have a parent-page
      var parentId = parentTab.ParentId;
      parentTab = TabController.Instance.GetTab(parentId, portalId, false);
      if (parentTab == null)
        break;

      // See if the parent page has a setting which applies to children
      var parentSetting = allSettings?.FirstOrDefault(c => c.PageId == parentId);
      if (parentSetting?.ApplyToChildren == true)
        return new SettingsBundle(original) { OfPageId = parentId, Settings = parentSetting };
    }
    return new SettingsBundle(original) { OfPageId = 0, Settings = null };
  }

  // Helper: Get value from settings or fallback
  private dynamic GetSettingValue(SettingsBundle status, string key, dynamic fallback)
  {
    if (status.Found && status.Settings.Get(key) != null)
      return status.Settings.Get(key);
    return fallback;
  }

  // Helper: Get toolbar for editing
  private dynamic GetToolbar(SettingsBundle status, int currentTabId)
  {
    var toolbar = Kit.Toolbar.Default().New("CacheSettings", tweak: b => b.Color("gray").Prefill("PageId", currentTabId));

    if (status.Found)
    {
      toolbar = Kit.Toolbar.Default(status.Settings).New("-");
      if (status.IsOfParent && status.IgnoredPageSettings == null)
        toolbar = Kit.Toolbar.Default().Edit("-").New("CacheSettings", tweak: b => b.Color("gray").Prefill("PageId", currentTabId));
      if (status.IgnoredPageSettings != null)
        toolbar = Kit.Toolbar.Default(status.IgnoredPageSettings).New("-");
    }
    return toolbar;
  }

  // Helper: Render settings info block
  private IHtmlString RenderSettingsInfo(SettingsBundle status, int currentTabId)
  {
    if (!status.Found)
      return new HtmlString("<div>" + App.Resources.MsgNoSettings.Replace("([currentpage])", currentTabId.ToString()) + "</div>");

    var info = "";
    if (status.IsOfParent && status.Settings.ApplyToChildren)
    {
      if (status.IgnoredPageSettings != null && status.TriedParents)
      {
        info += $"<div>{App.Resources.MsgNotAppliedSettings}<div>{App.Resources.LabelTitle} <strong>{Text.First(status.IgnoredPageSettings.Title, "-")}</strong></div></div>";
      }
      info += $"<div>{App.Resources.MsgAppliedFromParent.Replace("([parentpage])", status.OfPageId.ToString())} {status.ForPageId}</div>";
    }
    if (!status.IsOfParent && status.Settings.ApplyToPage)
    {
      info += $"<div>{App.Resources.MsgAppliedToPage} {currentTabId}</div>";
    }
    info += $"<div>{App.Resources.LabelTitle} <strong>{Text.First(status.Settings.Title, "-")}</strong></div>";
    return new HtmlString(info);
  }

  // Helper: SettingsBundle class
  private class SettingsBundle
  {
    public SettingsBundle() { }
    public SettingsBundle(SettingsBundle original)
    {
      ForPageId = original.ForPageId;
      IgnoredPageSettings = original.Settings;
      TriedParents = true;
    }
    public int ForPageId;
    public bool IsOfParent { get { return ForPageId != OfPageId; } }
    public int OfPageId;
    public bool Found { get { return Settings != null; } }
    public dynamic Settings;
    public dynamic IgnoredPageSettings;
    public bool TriedParents;
  }
}