@* @inherits AppCode.Razor.AppRazor
@using AppCode.Data
@using AppCode.Helpers *@

@inherits ToSic.Sxc.Dnn.RazorComponent
@using ToSic.Razor.Blade

@using System.Web
@using System
@using DotNetNuke.Entities.Portals
@using DotNetNuke.Entities.Tabs;

@{
  var portal = PortalSettings.Current;
  var tab = portal.ActiveTab;
  var currentTabId = Dnn.Tab.TabID;

  // var allCacheSettings = App.Data.GetAll<CacheSettings>();
  var allCacheSettings = AsList(App.Data["CacheSettings"]);

  dynamic cacheSettings = allCacheSettings?.FirstOrDefault(c => c.PageId == tab.TabID);
  dynamic notAppliedSettings = null;
  bool isParentSetting = false;
  bool searchedParent = false;
  bool found = false;

  if (cacheSettings != null && cacheSettings.ApplyToPage == false)
  {
    searchedParent = true;
    notAppliedSettings = cacheSettings;
    cacheSettings = FindParentCacheSetting(tab, allCacheSettings, portal.PortalId);

    if (cacheSettings != null)
    {
      isParentSetting = true;
      found = true;
    }
  }
  else if (cacheSettings != null)
  {
    found = true;
  }
  else
  {
    cacheSettings = FindParentCacheSetting(tab, allCacheSettings, portal.PortalId);
    if (cacheSettings != null)
    {
      isParentSetting = true;
      found = true;
    }
  }

  if (!found || cacheSettings == null)
  {
    <div class="alert alert-info" @Edit.TagToolbar(Content, toolbar: new[] { "new&color=red?contentType=CacheSettings&prefill:PageId=" + currentTabId })>
      @App.Resources.MsgNoSettings @currentTabId.
    </div>
    return;
  }

  var isEnabled = cacheSettings.Get("IsEnabled") != null
    ? cacheSettings.IsEnabled
    : App.Settings.IsEnabled;

  var cacheMaxAge = cacheSettings.Get("MaxAge") != null
    ? cacheSettings.MaxAge
    : App.Settings.MaxAge;

  var cacheSMaxAge = cacheSettings.Get("SMaxAge") != null
    ? cacheSettings.SMaxAge
    : App.Settings.SMaxAge;

  var cacheTag = Text.Has(cacheSettings.CacheTag)
    ? cacheSettings.CacheTag
    : App.Settings.CacheTag;

  var now = DateTime.UtcNow;
  var header = "";

  var toolbar = Edit.TagToolbar(cacheSettings);

  if (isParentSetting && notAppliedSettings == null)
  {
    toolbar = Edit.TagToolbar(cacheSettings, toolbar: new[] { "-edit", "new&color=red?contentType=CacheSettings&prefill:PageId=" + currentTabId });
  }

  if (notAppliedSettings != null)
  {
    toolbar = Edit.TagToolbar(notAppliedSettings);
  }

  if (isEnabled)
  {
    @* HeaderCache.SetPublicCacheHeaders(Response, cacheMaxAge, cacheSMaxAge); *@
    SetPublicCacheHeaders(Response, (int)cacheMaxAge, (int)cacheSMaxAge, cacheTag);
    header = $"public, max-age={cacheMaxAge}, s-maxage={cacheSMaxAge}";
  }
}

<!-- Server-Rendertime: @now.ToString("yyyy-MM-dd HH:mm:ss") -->
<script src="@App.Path/dist/index.js"></script>
<script>
  window.initCacheStatus(@isEnabled.ToString().ToLower(), "@header", "@cacheTag", "@now.ToString("yyyy-MM-dd HH:mm:ss")");
</script>

@if (Edit.Enabled)
{
  <div class="accordion" id="app-cdn">
    <div class="accordion-item">
      <h2 class="accordion-header">
        <button class="accordion-button @(App.Settings.OpenSettings ? "" : "collapsed")" type="button" data-bs-toggle="collapse" data-bs-target="#app-cache-settings">
          Caching @(isEnabled ? App.Resources.LabelEnabled + " ✔️" : App.Resources.LabelDisabled + " ❌")
        </button>
      </h2>
      <div id="app-cache-settings" class="accordion-collapse @(App.Settings.OpenSettings ? "collapse show" : "collapse")" data-bs-parent="#app-cdn">
        <div class="accordion-body">

          <div class="alert alert-success" @toolbar>

            @if (isParentSetting && cacheSettings.ApplyToChildren)
            {
              if (notAppliedSettings != null && searchedParent)
              {
                <div>
                  @Html.Raw(App.Resources.MsgNotAppliedSettings)
                  @if (Text.Has(notAppliedSettings.Title))
                  {
                    <div>@App.Resources.LabelTitle <strong>@notAppliedSettings.Title</strong></div>
                  }
                </div>
              }

              <div>@App.Resources.MsgAppliedFromParent @cacheSettings.PageId</div>
              <div>@App.Resources.LabelCurrentTabId @currentTabId</div>
            }

            @if (!isParentSetting && cacheSettings.ApplyToPage)
            {
              <div>@App.Resources.MsgAppliedToPage @currentTabId</div>
            }

            @if (Text.Has(cacheSettings.Title))
            {
              <div>@App.Resources.LabelTitle <strong>@cacheSettings.Title</strong></div>
            }

            <div><strong>MaxAge:</strong> @cacheMaxAge <strong>SMaxAge:</strong> @cacheSMaxAge</div>
          </div>

          <h3>Cache</h3>
          <div class="input-group mb-3">
            <button class="btn btn-primary" type="button" id="custom-purge">@App.Resources.FlushUrl</button>
            <input type="text" class="form-control" placeholder="Enter url which should be purged" value="@Link.To()" id="custom-purge-url">
          </div>

          <div class="input-group mb-3">
            <button class="btn btn-outline-primary" type="button" id="tag-purge">@App.Resources.FlushTags</button>
            <input type="text" class="form-control" value="" id="tag-purge-url">
          </div>

          <div class="input-group mb-3">
            <button class="btn btn-outline-primary" type="button" id="full-purge">@App.Resources.FlushAll</button>
          </div>

          @if (PortalSettings.Current.UserInfo.IsSuperUser)
          {
            <h3>@App.Resources.LabelStats</h3>
            <div class="text-danger">@Html.Raw(App.Resources.MsgOpenInAnonymous)</div>
            <textarea class="form-control" id="app-stats" rows="8" readonly></textarea>
          }
        </div>
      </div>
    </div>
  </div>
}

@functions {
  public void SetPublicCacheHeaders(HttpResponseBase Response, int browserCacheSeconds, int cloudflareCacheSeconds, string cacheTags = "")
  {
    Response.Cache.SetCacheability(HttpCacheability.Public);
    var ttlBrowser = TimeSpan.FromSeconds(browserCacheSeconds);
    var ttlCloudflare = TimeSpan.FromSeconds(cloudflareCacheSeconds);
    Response.Cache.SetMaxAge(ttlBrowser);
    Response.Cache.SetProxyMaxAge(ttlCloudflare);

    if (cacheTags != "")
    {
      Response.Headers.Add("Cache-Tag", cacheTags);
    }
  }

  public dynamic FindParentCacheSetting(TabInfo tab, IEnumerable<dynamic> allSettings, int portalId)
  {
    var parentTab = tab;
    while (parentTab != null)
    {
      parentTab = TabController.Instance.GetTab(parentTab.ParentId, portalId, false);
      if (parentTab == null) break;

      var parentSetting = allSettings?.FirstOrDefault(c => c.PageId == parentTab.TabID);
      if (parentSetting?.ApplyToChildren == true)
      {
        return parentSetting;
      }
    }
    return null;  
}